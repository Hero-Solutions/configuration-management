---
- name: Check if admin user exists in MongoDB
  command: mongo --quiet --eval "db.Users.find({ 'username'{{ ':' }} '{{ datahub['admin']['username'] }}' })" datahub
  register: mongodb_admin_user_exists
  become_user: "{{ application_user }}"

- name: Insert admin user into MongoDB
  command: mongo --eval 'db.Users.insert({{ lookup("template", "./mongodb_admin_user.json") }})' datahub
  when: mongodb_admin_user_exists.stdout | length == 0
  become_user: "{{ application_user }}"

- name: Check if consumer user exists in MongoDB
  command: mongo --quiet --eval "db.Users.find({ 'username'{{ ':' }} '{{ datahub['consumer']['username'] }}' })" datahub
  register: mongodb_consumer_user_exists
  become_user: "{{ application_user }}"

- name: Insert consumer user into MongoDB
  command: mongo --eval 'db.Users.insert({{ lookup("template", "./mongodb_consumer_user.json") }})' datahub
  when: mongodb_consumer_user_exists.stdout | length == 0
  become_user: "{{ application_user }}"

- name: Check if OAuth client exists
  command: mongo --quiet --eval "db.Client.find({ 'applicationName' {{ ':' }} '{{ datahub['oauth']['application_name'] }}' })" datahub
  register: mongodb_oauth_client_exists
  become_user: "{{ application_user }}"

- name: Fetch consumer _id from MongoDB
  command: mongo --quiet --eval "db.Users.find({ 'username' {{ ':' }} '{{ datahub['consumer']['username'] }}' }, { '_id' {{ ':' }} 1 })" datahub
  register: mongodb_consumer_id_string
  when: mongodb_oauth_client_exists.stdout | length == 0
  become_user: "{{ application_user }}"

- name: Store _id in a var, generate client_id, secret and external_id
  set_fact:
    datahub:
      repo_dir: "{{ datahub['repo_dir'] | regex_replace('\\/$', '') }}"
      secret_token: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=32') }}"
      oauth:
        mongodb_consumer_id: "{{ mongodb_consumer_id_string.stdout | regex_replace('^.*ObjectId.\"(.*)\".*$', '\\1') }}"
        client_id: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=50') }}"
        secret: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=50') }}"
        external_id: "{{ lookup('password', '/dev/null chars=hexdigits length=6') | lower }}"
  when: mongodb_oauth_client_exists.stdout | length == 0
  become_user: "{{ application_user }}"

- name: Insert OAuth client into MongoDB
  command: mongo --eval 'db.Client.insert({{ lookup("template", "./mongodb_oauth_client.json") }})' datahub
  when: mongodb_oauth_client_exists.stdout | length == 0
  become_user: "{{ application_user }}"

- name: Fetch client_id to use in the datahub pipeline
  command: mongo --quiet --eval "db.Client.find({ 'applicationName' {{ ':' }} '{{ datahub['oauth']['application_name'] }}' }, { '_id' {{ ':' }} 0, 'randomId' {{ ':' }} 1 })" datahub
  register: oauth_client_id_raw
  when: mongodb_oauth_client_exists.stdout | length > 0
  become_user: "{{ application_user }}"

- name: Fetch secret to use in the datahub pipeline
  command: mongo --quiet --eval "db.Client.find({ 'applicationName' {{ ':' }} '{{ datahub['oauth']['application_name'] }}' }, { '_id' {{ ':' }} 0, 'secret' {{ ':' }} 1 })" datahub
  register: oauth_secret_raw
  when: mongodb_oauth_client_exists.stdout | length > 0
  become_user: "{{ application_user }}"

- name: Store client_id and secret in vars
  set_fact:
    datahub:
      repo_dir: "{{ datahub['repo_dir'] | regex_replace('\\/$', '') }}"
      secret_token: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=32') }}"
      oauth:
        client_id: "{{ oauth_client_id_raw.stdout | regex_replace('.*\"randomId\".*\"(.*)\".*', '\\1') }}"
        secret: "{{ oauth_secret_raw.stdout | regex_replace('.*\"secret\".*\"(.*)\".*', '\\1') }}"
  when: mongodb_oauth_client_exists.stdout | length > 0
  become_user: "{{ application_user }}"

- name: Create repo folder
  file: 
    path: "{{ datahub['repo_dir'] }}"
    state: directory
    recurse: true 
    owner: "{{ application_user }}"
    group: "{{ application_user }}"
#  become_user: root

- name: Checkout datahub repo
  git:
    repo: "{{ datahub['repo_url'] }}"
    dest: "{{ datahub['repo_dir'] }}/repo/"
    force: true
#    version: release-0.22
  become_user: "{{ application_user }}"

- name: Create shared folders
  file:
    path: "{{ datahub['repo_dir'] }}/shared/{{ item }}/"
    state: directory
    recurse: true
  with_items:
    - cache
    - logs
    - vendor
  become_user: "{{ application_user }}"

- name: Delete existing shared folders
  file:
    path: "{{ datahub['repo_dir'] }}/repo/app/{{ item }}"
    state: absent
  with_items:
    - cache
    - logs
    - vendor
  become_user: "{{ application_user }}"

- name: Link shared folders
  file:
    src: "{{ datahub['repo_dir'] }}/shared/{{ item }}"
    dest: "{{ datahub['repo_dir'] }}/repo/app/{{ item }}"
    state: link
    force: true
  with_items:
    - cache
    - logs
    - vendor
  become_user: "{{ application_user }}"

- name: Copy parameters.yml for datahub
  template:
    src: parameters.yml
    dest: "{{ datahub['dir'] }}/app/config/parameters.yml"
#    owner: "{{ application_user }}"
#    group: "{{ application_user }}"
  become_user: "{{ application_user }}"

- name: Copy config_dev.yml for datahub
  template:
    src: config_dev.yml
    dest: "{{ datahub['dir'] }}/app/config/config_dev.yml"
#    owner: "{{ application_user }}"
#    group: "{{ application_user }}"
  become_user: "{{ application_user }}"

- name: Link datahub repo
  file:
    src: "{{ datahub['repo_dir'] }}/repo/"
    dest: "{{ datahub['dir'] }}"
    state: link
    owner: "{{ application_user }}"
    group: "{{ application_user }}"
#  become_user: root

- name: Install datahub through composer
  command: composer install
  args:
    chdir: "{{ datahub['dir'] }}"
  become_user: "{{ application_user }}"

- name: Chown cache and logs folders
  file:
    path: "{{ datahub['repo_dir'] }}/shared/{{ item }}/"
    state: directory
    recurse: true
    owner: "{{ php['user'] }}"
    group: "{{ php['group'] }}"
  with_items:
    - cache
    - logs
#  become_user: root
